{
    "collab_server" : "",
    "contents" : "---\ntitle: \"Seurat - DroncSeq re-analysis\"\noutput:\n  html_document:\n    theme: united\ndate: 'Compiled: `r format(Sys.Date(), \"%B %d, %Y\")`'\n---\n***\n\n```{r setup, include=FALSE}\nknitr::opts_chunk$set(\n  cache = TRUE,\n  cache.lazy = FALSE,\n  tidy = TRUE\n)\n```\n\n### Setup the Seurat Object\n\nWe start by reading in the data. All features in Seurat have been configured to work with sparse matrices which results in significant memory and speed savings for Drop-seq/inDrop/10x data.\n```{r init, message=FALSE}\nlibrary(Seurat)\nlibrary(tidyverse)\nrequire(data.table)\n#require(gdata)\n\n\n# Load the tissue dataset\nfile =\"./data/GTEx_droncseq_hip_pcf.umi_counts.txt\"\ntissue <- fread(file);  setDF(tissue,rownames = tissue$V1);  tissue$V1 <- NULL\n\n# Examine the memory savings between regular and sparse matrices\ndense.size <- object.size(x = as.matrix(x = tissue))\ndense.size\nsparse.size <- object.size(x = tissue)\nsparse.size\nsignif(dense.size / sparse.size,4)\n```\n\n```{r create.object, results='hide', message=FALSE}\n# Initialize the Seurat object with the raw (non-normalized data).\n# Keep all genes expressed in >= 3 cells (~0.1% of the data). Keep all cells with at least 200 detected genes\ntissue <- CreateSeuratObject(raw.data = tissue, min.cells = 10, min.genes = 200, project = \"hip_pcf\")\nlevels(tissue@ident)\n```\n\n***\n\n### Standard pre-processing workflow\nThe steps below encompass the standard pre-processing workflow for scRNA-seq data in Seurat. These represent the creation of a Seurat object, the selection and filtration of cells based on QC metrics, data normalization and scaling, and the detection of highly variable genes. In previous versions, we grouped many of these steps together in the `Setup` function, but in v2, we separate these steps into a clear and sequential workflow.\n\n\n### QC and selecting cells for further analysis\nWhile the `CreateSeuratObject` imposes a basic minimum gene-cutoff, you may want to filter out cells at this stage based on technical or biological parameters. Seurat allows you to easily explore QC metrics and filter cells based on any user-defined criteria. In the example below, we visualize gene and molecule counts, plot their relationship, and exclude cells with a clear outlier number of genes detected as potential multiplets. Of course this is not a guaranteed method to exclude cell doublets, but we include this as an example of filtering user-defined outlier cells. We also filter cells based on the percentage of mitochondrial genes present.\n\n```{r qc, results='hide', fig.height=7,fig.width=13}\n# The number of genes and UMIs (nGene and nUMI) are automatically calculated for every object by Seurat.\n# For non-UMI data, nUMI represents the sum of the non-normalized values within a cell\n# We calculate the percentage of mitochondrial genes here and store it in percent.mito using AddMetaData.\n# We use object@raw.data since this represents non-transformed and non-log-normalized counts\n# The % of UMI mapping to MT-genes is a common scRNA-seq QC metric.\n# NOTE: You must have the Matrix package loaded to calculate the percent.mito values.\nmito.genes <- grep(pattern = \"^MT-\", x = rownames(x = tissue@data), value = TRUE)\npercent.mito <- colSums(tissue@raw.data[mito.genes, ]) / colSums(tissue@raw.data)\n\n# AddMetaData adds columns to object@meta.data, and is a great place to stash QC stats\ntissue <- AddMetaData(object = tissue, metadata = percent.mito, col.name = \"percent.mito\")\nVlnPlot(object = tissue, features.plot = c(\"nGene\", \"nUMI\", \"percent.mito\"), nCol = 3)\n\n# GenePlot is typically used to visualize gene-gene relationships, but can be used for anything \n# calculated by the object, i.e. columns in object@meta.data, PC scores etc.\n# Since there is a rare subset of cells with an outlier level of high mitochondrial percentage\n# and also low UMI content, we filter these as well\npar(mfrow = c(1, 2))\nGenePlot(object = tissue, gene1 = \"nUMI\", gene2 = \"percent.mito\")\nGenePlot(object = tissue, gene1 = \"nUMI\", gene2 = \"nGene\")\n\n# We filter out cells that have unique gene counts over 2,500 or less than 200\n# Note that low.thresholds and high.thresholds are used to define a 'gate'\n# -Inf and Inf should be used if you don't want a lower or upper threshold.\n#tissue <- FilterCells(object = tissue, subset.names = c(\"nGene\", \"percent.mito\"), low.thresholds = c(200, -Inf), high.thresholds = c(2500, 0.05))\n\n\ntissue <- FilterCells(object = tissue, subset.names = c(\"nGene\", \"percent.mito\"), low.thresholds = c(200, -Inf), high.thresholds = c(2500, 0.05))\n```\n***\n\n***\n### Normalizing the data\n\nAfter removing unwanted cells from the dataset, the next step is to normalize the data. By default, we employ a global-scaling normalization method \"LogNormalize\" that normalizes the gene expression measurements for each cell by the total expression, multiplies this by a scale factor (10,000 by default), and log-transforms the result. \n\n```{r normalize, results='hide'}\ntissue <- NormalizeData(object = tissue, normalization.method = \"LogNormalize\", scale.factor = 1e4)\n```\n\n### Detection of variable genes across the single cells\n\nSeurat calculates highly variable genes and focuses on these for downstream analysis. **`FindVariableGenes`** calculates the average expression and dispersion for each gene, places these genes into bins, and then calculates a z-score for dispersion within each bin. This helps control for the relationship between variability and average expression. This function is unchanged from (Macosko *et al*.), but new methods for variable gene expression identification are coming soon. We suggest that users set these parameters to mark visual outliers on the dispersion plot, but the exact parameter settings may vary based on the data type, heterogeneity in the sample, and normalization strategy. The parameters here identify ~2,000 variable genes, and represent typical parameter settings for UMI data that is normalized to a total of 1e4 molecules.\n\n```{r var_genes, fig.height=7, fig.width=11, results='hide'}\ntissue <- FindVariableGenes(object = tissue, mean.function = ExpMean, dispersion.function = LogVMR, x.low.cutoff = 0.0125, x.high.cutoff = 3, y.cutoff = 0.5)\n```\n\n```{r len_var_genes}\nlength(x = tissue@var.genes)\n```\n\n***\n\n### Scaling the data and removing unwanted sources of variation\n\nYour single cell dataset likely contains 'uninteresting' sources of variation. This could include not only technical noise, but batch effects, or even biological sources of variation (cell cycle stage). As suggested in Buettner *et al*, NBT, 2015, regressing these signals out of the analysis can improve downstream dimensionality reduction and clustering. To mitigate the effect of these signals, Seurat constructs linear models to predict gene expression based on user-defined variables. The scaled z-scored residuals of these models are stored in the scale.data slot, and  are used for dimensionality reduction and clustering. \n\nWe can regress out cell-cell variation in gene expression driven by batch (if applicable), cell alignment rate (as provided by Drop-seq tools for Drop-seq data),  the number of detected molecules, and mitochondrial gene expression. For cycling cells, we can also learn a 'cell-cycle' score (see example [HERE]) and regress this out as well. In this simple example here for post-mitotic blood cells, we regress on the number of detected molecules per cell as well as the percentage mitochondrial gene content.  \n\nSeurat v2.0 implements this regression as part of the data scaling process. Therefore, the `RegressOut` function has been deprecated, and replaced with the vars.to.regress argument in `ScaleData`.\n\n```{r regress, fig.height=7, fig.width=11, results='hide'}\ntissue <- ScaleData(object = tissue, vars.to.regress = c(\"nUMI\", \"percent.mito\"))\n```\n***\n\n### Perform linear dimensional reduction\n\nNext we perform PCA on the scaled data. By default, the genes in `object@var.genes` are used as input, but can be defined using pc.genes. We have typically found that running dimensionality reduction on highly variable genes can improve performance. However, with UMI data - particularly after regressing out technical variables, we often see that PCA returns similar (albeit slower) results when run on much larger subsets of genes, including the whole transcriptome.\n\n```{r pca}\ntissue <- RunPCA(object = tissue, pc.genes = tissue@var.genes, do.print = TRUE, pcs.print = 1:5, genes.print = 5)\n```\n\nSeurat provides several useful ways of visualizing both cells and genes that define the PCA, including `PrintPCA`, `VizPCA`, `PCAPlot`, and `PCHeatmap`\n\n\n```{r pca_viz}\n# Examine and visualize PCA results a few different ways\nPrintPCA(object = tissue, pcs.print = 1:5, genes.print = 5, use.full = FALSE)\nVizPCA(object = tissue, pcs.use = 1:2)\nPCAPlot(object = tissue, dim.1 = 1, dim.2 = 2)\n\n# ProjectPCA scores each gene in the dataset (including genes not included in the PCA) based on their correlation \n# with the calculated components. Though we don't use this further here, it can be used to identify markers that \n# are strongly correlated with cellular heterogeneity, but may not have passed through variable gene selection. \n# The results of the projected PCA can be explored by setting use.full=T in the functions above\ntissue <- ProjectPCA(object = tissue, do.print = FALSE)\n```\n\nIn particular `PCHeatmap` allows for easy exploration of the primary sources of heterogeneity in a dataset, and can be useful when trying to decide which PCs to include for further downstream analyses. Both cells and genes are ordered according to their PCA scores. Setting cells.use to a number plots the 'extreme' cells on both ends of the spectrum, which dramatically speeds plotting for large datasets. Though clearly a supervised analysis, we find this to be a valuable tool for exploring correlated gene sets.\n\n```{r single-heatmap, warning=FALSE}\nPCHeatmap(object = tissue, pc.use = 1, cells.use = 500, do.balanced = TRUE, label.columns = FALSE)\n```\n\n```{r multi-heatmap, fig.height=12, fig.width=9, warning=FALSE}\nPCHeatmap(object = tissue, pc.use = 1:12, cells.use = 500, do.balanced = TRUE, label.columns = FALSE, use.full = FALSE)\n```\n\n***\n\n### Determine statistically significant principal components\n\nTo overcome the extensive technical noise in any single gene for scRNA-seq data, Seurat clusters cells based on their PCA scores, with each PC essentially representing a 'metagene' that combines information across a correlated gene set. Determining how many PCs to include downstream is therefore an important step.\n\nIn Macosko *et al*, we implemented a resampling test inspired by the jackStraw procedure. We randomly permute a subset of the data (1% by default) and rerun PCA, constructing a 'null distribution' of gene scores, and repeat this procedure. We identify 'significant' PCs as those who have a strong enrichment of low p-value genes.\n\n```{r jackstraw, fig.height=6, fig.width=10, warning=FALSE}\n# NOTE: This process can take a long time for big datasets, comment out for expediency.\n# More approximate techniques such as those implemented in PCElbowPlot() can be used to reduce computation time\ntissue <- JackStraw(object = tissue, num.replicate = 100, do.print = FALSE)\n```\n\nThe `JackStrawPlot` function provides a visualization tool for comparing the distribution of p-values for each PC with a uniform distribution (dashed line). 'Significant' PCs will show a strong enrichment of genes with low p-values (solid curve above the dashed line). In this case it appears that PCs 1-10 are significant.\n\n```{r jsplots, fig.height=6, fig.width=10, warning=FALSE}\nJackStrawPlot(object = tissue, PCs = 1:12)\n```\n\nA more ad hoc method for determining which PCs to use is to look at a plot of the standard deviations of the principle components and draw your cutoff where there is a clear elbow in the graph. This can be done with `PCElbowPlot`. In this example, it looks like the elbow would fall around PC 9.\n\n```{r elbow_plot, fig.height=6, fig.width=10, warning=FALSE}\nPCElbowPlot(object = tissue)\n```\n\nPC selection -- identifying the true dimensionality of a dataset -- is an important step for Seurat, but can be challenging/uncertain for the user. We therefore suggest these three approaches to consider. The first is more supervised, exploring PCs to determine relevant sources of heterogeneity, and could be used in conjunction with GSEA for example. The second implements a statistical test based on a random null model, but is time-consuming for large datasets, and may not return a clear PC cutoff. The third is a heuristic that is commonly used, and can be calculated instantly. In this example, all three approaches yielded similar results, but we might have been justified in choosing anything between PC 7-10 as a cutoff. We followed the jackStraw  here, admittedly buoyed by seeing the PCHeatmap returning interpretable signals (including canonical dendritic cell markers) throughout these PCs. Though the results are only subtly affected by small shifts in this cutoff (you can test below), we strongly suggest always explore the PCs they choose to include downstream.\n\n***\n\n### Cluster the cells\n\nSeurat now includes an graph-based clustering approach compared to (Macosko *et al*.). Importantly, the *distance metric* which drives the clustering analysis (based on previously identified PCs) remains the same. However, our approach to partioning the cellular distance matrix into clusters has dramatically improved. Our approach was heavily inspired by recent manuscripts which applied graph-based clustering approaches to scRNA-seq data [[SNN-Cliq, Xu and Su, Bioinformatics, 2015]](http://bioinformatics.oxfordjournals.org/content/early/2015/02/10/bioinformatics.btv088.abstract) and CyTOF data [[PhenoGraph, Levine *et al*., Cell, 2015]](http://www.ncbi.nlm.nih.gov/pubmed/26095251). Briefly, these methods embed cells in a graph structure - for example a K-nearest neighbor (KNN) graph, with edges drawn between cells with similar gene expression patterns, and then attempt to partition this graph into highly interconnected 'quasi-cliques' or 'communities'. As in PhenoGraph, we first construct a KNN graph based on the euclidean distance in PCA space, and refine the edge weights between any two cells based on the shared overlap in their local neighborhoods (Jaccard distance). To cluster the cells, we apply modularity optimization techniques [[SLM, Blondel *et al*., Journal of Statistical Mechanics]](http://dx.doi.org/10.1088/1742-5468/2008/10/P10008), to iteratively group cells together, with the goal of optimizing the standard modularity function.\n\nThe `FindClusters` function implements the procedure, and contains a resolution parameter that sets the 'granularity' of the downstream clustering, with increased values leading to a greater number of clusters. We find that setting this parameter between 0.6-1.2 typically returns good results for single cell datasets of around 3K cells. Optimal resolution often increases for larger datasets. The clusters are saved in the `object@ident` slot.\n\n\n```{r cluster, fig.height=5, fig.width=7}\n\n# save.SNN = T saves the SNN so that the clustering algorithm can be rerun using the same graph\n# but with a different resolution value (see docs for full details)\ntissue <- FindClusters(object = tissue, reduction.type = \"pca\", dims.use = 1:10, resolution = 0.6, print.output = 0, save.SNN = TRUE)\n```\n\nA useful feature in Seurat v2.0 is the ability to recall the parameters that were used in the latest function calls for commonly used functions. For FindClusters, we provide the function `PrintFindClustersParams` to print a nicely formatted formatted summary of the parameters that were chosen. \n\n```{r cluster.params}\nPrintFindClustersParams(object = tissue)\n# While we do provide function-specific printing functions, the more general function to \n# print calculation parameters is PrintCalcParams(). \n```\n\n***\n\n### Run Non-linear dimensional reduction (tSNE)\n\nSeurat continues to use tSNE as a powerful tool to visualize and explore these datasets. While we no longer advise clustering directly on tSNE components, cells within the graph-based clusters determined above should co-localize on the tSNE plot. This is because the tSNE aims to place cells with similar local neighborhoods in high-dimensional space together in low-dimensional space. As input to the tSNE, we suggest using the same PCs as input to the clustering analysis, although computing the tSNE based on scaled gene expression is also supported using the genes.use argument.\n\n```{r tsne, fig.height=5, fig.width=7, message=FALSE, warnings=FALSE}\ntissue <- RunTSNE(object = tissue, dims.use = 1:10, do.fast = TRUE)\n```\n\n```{r tsneplot, fig.height=5, fig.width=7}\n# note that you can set do.label=T to help label individual clusters\nTSNEPlot(object = tissue)\n```\n\nYou can save the object at this point so that it can easily be loaded back in without having to rerun the computationally intensive steps performed above, or easily shared with collaborators.\n```{r saveobject}\nsave(tissue, file = \"~/Projects/datasets/tissue3k/tissue_tutorial.Robj\")\n```\n\n***\n### Finding differentially expressed genes (cluster biomarkers)\n\nSeurat can help you find markers that define clusters via differential expression. By default, it identifes positive and negative markers of a single cluster (specified in `ident.1`), compared to all other cells.  `FindAllMarkers` automates this process for all clusters, but you can also test groups of clusters vs. each other, or against all cells.\n\nThe min.pct argument requires a gene to be detected at a minimum percentage in either of the two groups of cells, and the thresh.test argument requires a gene to be differentially expressed (on average) by some amount between the two groups. You can set both of these to 0, but with a dramatic increase in time - since this will test a large number of genes that are unlikely to be highly discriminatory. As another option to speed up these computations, max.cells.per.ident can be set. This will downsample each identity class to have no more cells than whatever this is set to. While there is generally going to be a loss in power, the speed increases can be significiant and the most highly differentially expressed genes will likely still rise to the top.\n\n\n```{r markers1, fig.height=8, fig.width=15, warning=FALSE}\n# find all markers of cluster 1\ncluster1.markers <- FindMarkers(object = tissue, ident.1 = 1, min.pct = 0.25)\nprint(x = head(x = cluster1.markers, n = 5))\n# find all markers distinguishing cluster 5 from clusters 0 and 3\ncluster5.markers <- FindMarkers(object = tissue, ident.1 = 5, ident.2 = c(0,3), min.pct = 0.25)\nprint(x = head(x = cluster5.markers, n = 5))\n# find markers for every cluster compared to all remaining cells, report only the positive ones\ntissue.markers <- FindAllMarkers(object = tissue, only.pos = TRUE, min.pct = 0.25, thresh.use = 0.25)\ntissue.markers %>% group_by(cluster) %>% top_n(2, avg_logFC)\n```\n\nSeurat has four tests for differential expression which can be set with the test.use parameter: ROC test (\"roc\"), t-test (\"t\"), LRT test based on zero-inflated data (\"bimod\", default), LRT test based on tobit-censoring models (\"tobit\") The ROC test returns the 'classification power' for any individual marker (ranging from 0 - random, to 1 - perfect).\n\n```{r markersroc, fig.height=8, fig.width=15,}\ncluster1.markers <- FindMarkers(object = tissue, ident.1 = 0, thresh.use = 0.25, test.use = \"roc\", only.pos = TRUE)\n```\n\nWe include several tools for visualizing marker expression. `VlnPlot` (shows expression probability distributions across clusters), and `FeaturePlot` (visualizes gene expression on a tSNE or PCA plot) are our most commonly used visualizations. We also suggest exploring `JoyPlot`, `CellPlot`, and `DotPlot` as additional methods to view your dataset.\n\n```{r markerplots, fig.height=8, fig.width=15,}\nVlnPlot(object = tissue, features.plot = c(\"MS4A1\", \"CD79A\"))\n\n# you can plot raw UMI counts as well\nVlnPlot(object = tissue, features.plot = c(\"NKG7\", \"PF4\"), use.raw = TRUE, y.log = TRUE)\n\nFeaturePlot(object = tissue, features.plot = c(\"MS4A1\", \"GNLY\", \"CD3E\", \"CD14\", \"FCER1A\", \"FCGR3A\", \"LYZ\", \"PPBP\", \"CD8A\"), cols.use = c(\"grey\", \"blue\"), reduction.use = \"tsne\")\n```\n\n`DoHeatmap` generates an expression heatmap for given cells and genes. In this case, we are plotting the top 20 markers (or all markers if less than 20) for each cluster.\n\n```{r clusterHeatmap, fig.height=8, fig.width=15, message=FALSE, warning=FALSE}\ntissue.markers %>% group_by(cluster) %>% top_n(10, avg_logFC) -> top10\n# setting slim.col.label to TRUE will print just the cluster IDS instead of every cell name\nDoHeatmap(object = tissue, genes.use = top10$gene, slim.col.label = TRUE, remove.key = TRUE)\n```\n\n***\n### Assigning cell type identity to clusters\n\nFortunately in the case of this dataset, we can use canonical markers to easily match the unbiased clustering to known cell types:\n\nCluster ID | Markers       | Cell Type\n-----------|---------------|----------\n0          | IL7R          | CD4 T cells\n1          | CD14, LYZ     | CD14+ Monocytes\n2          | MS4A1         | B cells\n3          | CD8A          | CD8 T cells\n4          | FCGR3A, MS4A7 | FCGR3A+ Monocytes\n5          | GNLY, NKG7    | NK cells\n6          | FCER1A, CST3  | Dendritic Cells\n7          | PPBP          | Megakaryocytes\n\n\n```{r labelplot, fig.height=5, fig.width=9, warning = FALSE}\ncurrent.cluster.ids <- c(0, 1, 2, 3, 4, 5, 6, 7)\nnew.cluster.ids <- c(\"CD4 T cells\", \"CD14+ Monocytes\", \"B cells\", \"CD8 T cells\", \"FCGR3A+ Monocytes\", \"NK cells\", \"Dendritic cells\", \"Megakaryocytes\")\ntissue@ident <- plyr::mapvalues(x = tissue@ident, from = current.cluster.ids, to = new.cluster.ids)\nTSNEPlot(object = tissue, do.label = TRUE, pt.size = 0.5)\n```\n\n### Further subdivisions within cell types\n\nIf you perturb some of our parameter choices above (for example, setting  `resolution=0.8` or changing the number of PCs), you might see the CD4 T cells subdivide into two groups. You can explore this subdivision to find markers separating the two T cell subsets. However, before reclustering (which will overwrite `object@ident`), we can stash our renamed identities to be easily recovered later.\n\n```{r investigate_split, fig.width=15}\n# First lets stash our identities for later\ntissue <- StashIdent(object = tissue, save.name = \"ClusterNames_0.6\")\n\n# Note that if you set save.snn=T above, you don't need to recalculate the SNN, and can simply put: \n# tissue <- FindClusters(tissue,resolution = 0.8)\ntissue <- FindClusters(object = tissue, reduction.type = \"pca\", dims.use = 1:10, resolution = 0.8, print.output = FALSE)\n\n# Demonstration of how to plot two tSNE plots side by side, and how to color points based on different criteria\nplot1 <- TSNEPlot(object = tissue, do.return = TRUE, no.legend = TRUE, do.label = TRUE)\nplot2 <- TSNEPlot(object = tissue, do.return = TRUE, group.by = \"ClusterNames_0.6\", no.legend = TRUE, do.label = TRUE)\nplot_grid(plot1, plot2)\n\n# Find discriminating markers\ntcell.markers <- FindMarkers(object = tissue, ident.1 = 0, ident.2 = 1)\n\n# Most of the markers tend to be expressed in C1 (i.e. S100A4). However, we can see that CCR7 is upregulated in \n# C0, strongly indicating that we can differentiate memory from naive CD4 cells.\n# cols.use demarcates the color palette from low to high expression\nFeaturePlot(object = tissue, features.plot = c(\"S100A4\", \"CCR7\"), cols.use = c(\"green\", \"blue\"))\n```\n\nThe memory/naive split is bit weak, and we would probably benefit from looking at more cells to see if this becomes more convincing. In the meantime, we can restore our old cluster identities for downstream processing.\n\n```{r restore}\ntissue <- SetAllIdent(object = tissue, id = \"ClusterNames_0.6\")\nsave(tissue, file = \"~/Projects/datasets/tissue3k_final.Rda\")\n```\n",
    "created" : 1509738938038.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "2279527170",
    "id" : "1FE3D7D0",
    "lastKnownWriteTime" : 1509740488,
    "last_content_update" : 1509740488820,
    "path" : "~/Dropbox/Projects/UCSD_2017/snRNA-seq/Habib2017/droncSeq.Rmd",
    "project_path" : "droncSeq.Rmd",
    "properties" : {
        "last_setup_crc32" : "9F61B537e203eeea"
    },
    "relative_order" : 4,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_markdown"
}